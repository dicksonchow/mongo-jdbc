/*
 * Copyright 2017 Carlos Tse <copperoxide@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.mongodb.jdbc;

import com.mongodb.DBCursor;
import com.mongodb.DBObject;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

public class MongoStatement implements Statement {

    MongoStatement(MongoConnection conn, int type, int concurrency, int holdability) {
        _conn = conn;
        _type = type;
        _concurrency = concurrency;
        _holdability = holdability;

        if (_type != 0)
            throw new UnsupportedOperationException("type not supported yet");
        if (_concurrency != 0)
            throw new UnsupportedOperationException("concurrency not supported yet");
        if (_holdability != 0)
            throw new UnsupportedOperationException("holdability not supported yet");

    }

    private MongoConnection _conn;

    private final int _type;
    private final int _concurrency;
    private final int _holdability;

    private int _fetchSize;
    private int _maxRows;

    private MongoResultSet _last;

    // --- batch ---

    @Override
    public void addBatch(String sql) {
        throw new UnsupportedOperationException("batch not supported");
    }

    @Override
    public void clearBatch() {
        throw new UnsupportedOperationException("batch not supported");
    }

    @Override
    public int[] executeBatch() {
        throw new UnsupportedOperationException("batch not supported");
    }

    // --- state ---

    @Override
    public void cancel() {
        throw new RuntimeException("not supported yet - can be");
    }

    @Override
    public void close() {
        _conn = null;
    }

    @Override
    public Connection getConnection() {
        return _conn;
    }

    @Override
    public boolean isClosed() {
        return _conn == null;
    }

    @Override
    public boolean isPoolable() {
        return true;
    }

    @Override
    public void closeOnCompletion() throws SQLException {

    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    @Override
    public void setPoolable(boolean poolable) {
        if (!poolable)
            throw new RuntimeException("why don't you want me to be poolable?");
    }

    @Override
    public void clearWarnings() {
        throw new RuntimeException("not supported yet - can be");
    }

    // --- writes ----

    @Override
    public boolean execute(String sql) {
        throw new RuntimeException("execute not done");
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) {
        throw new RuntimeException("execute not done");
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) {
        throw new RuntimeException("execute not done");
    }

    @Override
    public boolean execute(String sql, String[] columnNames) {
        throw new RuntimeException("execute not done");
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return new Executor(_conn._db, sql).writeop();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) {
        throw new RuntimeException("executeUpdate not done");
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) {
        throw new RuntimeException("executeUpdate not done");
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) {
        throw new RuntimeException("executeUpdate not done");
    }

    @Override
    public int getUpdateCount() {
        throw new RuntimeException("getUpdateCount not done");
    }

    @Override
    public ResultSet getGeneratedKeys() {
        throw new RuntimeException("getGeneratedKeys notn done");
    }

    // ---- reads -----

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        // TODO
        // handle max rows
        ArrayList<DBObject> cursor = new Executor(_conn._db, sql).query();

//        if (_fetchSize > 0)
//            cursor.batchSize(_fetchSize);
//
//        if (_maxRows > 0)
//            cursor.limit(_maxRows);

        _last = new MongoResultSet(cursor);
        return _last;
    }

    @Override
    public int getQueryTimeout() {
        throw new RuntimeException("query timeout not done");
    }

    @Override
    public void setQueryTimeout(int seconds) {
        throw new RuntimeException("query timeout not done");
    }

    // ---- fetch modifiers ----

    @Override
    public int getFetchSize() {
        return _fetchSize;
    }

    @Override
    public void setFetchSize(int rows) {
        _fetchSize = rows;
    }

    @Override
    public int getMaxRows() {
        return _maxRows;
    }

    @Override
    public void setMaxRows(int max) {
        _maxRows = max;
    }

    @Override
    public int getFetchDirection() {
        throw new RuntimeException("fetch direction not done yet");
    }

    @Override
    public void setFetchDirection(int direction) {
        throw new RuntimeException("fetch direction not done yet");
    }

    @Override
    public int getMaxFieldSize() {
        throw new RuntimeException("max field size not supported");
    }

    @Override
    public void setMaxFieldSize(int max) {
        throw new RuntimeException("max field size not supported");
    }

    @Override
    public boolean getMoreResults() {
        throw new RuntimeException("getMoreResults not supported");
    }

    @Override
    public boolean getMoreResults(int current) {
        throw new RuntimeException("getMoreResults not supported");
    }

    @Override
    public ResultSet getResultSet() {
        return _last;
    }

    // ---- more random -----

    @Override
    public SQLWarning getWarnings() {
        throw new UnsupportedOperationException("warning not supported yet");
    }

    @Override
    public void setCursorName(String name) {
        throw new UnsupportedOperationException("can't set cursor name");
    }

    @Override
    public void setEscapeProcessing(boolean enable) {
        if (!enable)
            throw new RuntimeException("why do you want to turn escape processing off?");
    }

    @Override
    public int getResultSetConcurrency() {
        return _concurrency;
    }

    @Override
    public int getResultSetHoldability() {
        return _holdability;
    }

    @Override
    public int getResultSetType() {
        return _type;
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        throw new UnsupportedOperationException();
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        throw new UnsupportedOperationException();
    }
}
